{"ast":null,"code":"import { QueryObserver } from './queryObserver.mjs';\nimport { infiniteQueryBehavior, hasNextPage, hasPreviousPage } from './infiniteQueryBehavior.mjs';\nclass InfiniteQueryObserver extends QueryObserver {\n  // Type override\n  // Type override\n  // Type override\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(client, options) {\n    super(client, options);\n  }\n  bindMethods() {\n    super.bindMethods();\n    this.fetchNextPage = this.fetchNextPage.bind(this);\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this);\n  }\n  setOptions(options, notifyOptions) {\n    super.setOptions({\n      ...options,\n      behavior: infiniteQueryBehavior()\n    }, notifyOptions);\n  }\n  getOptimisticResult(options) {\n    options.behavior = infiniteQueryBehavior();\n    return super.getOptimisticResult(options);\n  }\n  fetchNextPage() {\n    let {\n      pageParam,\n      ...options\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: {\n          direction: 'forward',\n          pageParam\n        }\n      }\n    });\n  }\n  fetchPreviousPage() {\n    let {\n      pageParam,\n      ...options\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: {\n          direction: 'backward',\n          pageParam\n        }\n      }\n    });\n  }\n  createResult(query, options) {\n    var _state$data, _state$data2, _state$fetchMeta, _state$fetchMeta$fetc, _state$fetchMeta2, _state$fetchMeta2$fet;\n    const {\n      state\n    } = query;\n    const result = super.createResult(query, options);\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, (_state$data = state.data) == null ? void 0 : _state$data.pages),\n      hasPreviousPage: hasPreviousPage(options, (_state$data2 = state.data) == null ? void 0 : _state$data2.pages),\n      isFetchingNextPage: state.fetchStatus === 'fetching' && ((_state$fetchMeta = state.fetchMeta) == null ? void 0 : (_state$fetchMeta$fetc = _state$fetchMeta.fetchMore) == null ? void 0 : _state$fetchMeta$fetc.direction) === 'forward',\n      isFetchingPreviousPage: state.fetchStatus === 'fetching' && ((_state$fetchMeta2 = state.fetchMeta) == null ? void 0 : (_state$fetchMeta2$fet = _state$fetchMeta2.fetchMore) == null ? void 0 : _state$fetchMeta2$fet.direction) === 'backward'\n    };\n  }\n}\nexport { InfiniteQueryObserver };","map":{"version":3,"mappings":";;AAuBO,MAAMA,qBAAN,SAMGC,aANH,CAYL;EACA;EAKA;EAGA;EAKA;EACAC,WAAW,CACTC,MADS,EAETC,OAFS,EAST;IACA,KAAMD,OAAN,EAAcC,OAAd;EACD;EAESC,WAAW,GAAS;IAC5B,MAAMA,WAAN;IACA,IAAKC,cAAL,GAAqB,IAAKA,cAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;IACA,IAAKC,kBAAL,GAAyB,IAAKA,kBAAL,CAAuBD,IAAvB,CAA4B,IAA5B,CAAzB;EACD;EAEDE,UAAU,CACRL,OADQ,EAQRM,aARQ,EASF;IACN,MAAMD,UAAN,CACE;MACE,GAAGL,OADL;MAEEO,QAAQ,EAAEC,qBAAqB;IAFjC,CADF,EAKEF,aALF;EAOD;EAEDG,mBAAmB,CACjBT,OADiB,EAQ2B;IAC5CA,OAAO,CAACO,QAAR,GAAmBC,qBAAqB,EAAxC;IACA,OAAO,KAAMC,oBAAN,CAA0BT,OAA1B,CAAP;EAID;EAEDE,aAAa,GAEX;IAAA,IAFY;MAAEQ,SAAF;MAAa,GAAGV;IAAhB,wEAAkD,EAAnD;IAGX,OAAO,IAAKW,MAAL,CAAW;MAChB,GAAGX,OADa;MAEhBY,IAAI,EAAE;QACJC,SAAS,EAAE;UAAEC,SAAS,EAAE,SAAb;UAAwBJ;QAAxB;MADP;IAFU,CAAX,CAAP;EAMD;EAEDN,iBAAiB,GAKf;IAAA,IALgB;MAChBM,SADgB;MAEhB,GAAGV;IAFa,wEAGY,EAHb;IAMf,OAAO,IAAKW,MAAL,CAAW;MAChB,GAAGX,OADa;MAEhBY,IAAI,EAAE;QACJC,SAAS,EAAE;UAAEC,SAAS,EAAE,UAAb;UAAyBJ;QAAzB;MADP;IAFU,CAAX,CAAP;EAMD;EAESK,YAAY,CACpBC,KADoB,EAEpBhB,OAFoB,EASwB;IAAA;IAC5C,MAAM;MAAEiB;IAAF,IAAYD,KAAlB;IACA,MAAME,MAAM,GAAG,KAAMH,aAAN,CAAmBC,KAAnB,EAA0BhB,OAA1B,CAAf;IACA,OAAO;MACL,GAAGkB,MADE;MAELhB,aAAa,EAAE,KAAKA,aAFf;MAGLE,iBAAiB,EAAE,KAAKA,iBAHnB;MAILe,WAAW,EAAEA,WAAW,CAACnB,OAAD,iBAAUiB,KAAK,CAACG,IAAhB,qBAAUC,WAAYC,MAAtB,CAJnB;MAKLC,eAAe,EAAEA,eAAe,CAACvB,OAAD,kBAAUiB,KAAK,CAACG,IAAhB,qBAAUI,YAAYF,MAAtB,CAL3B;MAMLG,kBAAkB,EAChBR,KAAK,CAACS,WAAN,KAAsB,UAAtB,IACA,0BAAK,CAACC,SAAN,KAAiBd,mEAAjB,KAA4BC,+CAA5B,MAA0C,SARvC;MASLc,sBAAsB,EACpBX,KAAK,CAACS,WAAN,KAAsB,UAAtB,IACA,2BAAK,CAACC,SAAN,gEAAiBd,SAAjB,2CAA4BC,SAA5B,MAA0C;KAX9C;EAaD;AAvHD","names":["InfiniteQueryObserver","QueryObserver","constructor","client","options","bindMethods","fetchNextPage","bind","fetchPreviousPage","setOptions","notifyOptions","behavior","infiniteQueryBehavior","getOptimisticResult","pageParam","fetch","meta","fetchMore","direction","createResult","query","state","result","hasNextPage","data","_state$data","pages","hasPreviousPage","_state$data2","isFetchingNextPage","fetchStatus","fetchMeta","isFetchingPreviousPage"],"sources":["/Users/jiali/project/reactPractice2/customhook/node_modules/@tanstack/query-core/src/infiniteQueryObserver.ts"],"sourcesContent":["import type {\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions, ObserverFetchOptions } from './queryObserver'\nimport { QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport type { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>,\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>,\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions: ObserverFetchOptions,\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions,\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage({ pageParam, ...options }: FetchNextPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage({\n    pageParam,\n    ...options\n  }: FetchPreviousPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>, TQueryKey>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(options, state.data?.pages),\n      isFetchingNextPage:\n        state.fetchStatus === 'fetching' &&\n        state.fetchMeta?.fetchMore?.direction === 'forward',\n      isFetchingPreviousPage:\n        state.fetchStatus === 'fetching' &&\n        state.fetchMeta?.fetchMore?.direction === 'backward',\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}